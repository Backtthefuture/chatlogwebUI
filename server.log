
🚀 聊天记录查询网站已启动
📱 访问地址: http://localhost:3000
🔗 请确保Chatlog HTTP服务已在端口5030启动
⏰ 正在创建新的定时任务，执行时间: 0 40 12 * * *
✅ 定时分析已启用，执行时间: 0 40 12 * * *
🌏 时区设置: Asia/Shanghai

💡 手动触发定时分析: POST /api/trigger-scheduled-analysis
📊 查看定时任务状态: GET /api/scheduled-analysis-status

🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
AI分析请求: {
  groupName: '航海家俱乐部🗺️｜生财有术',
  analysisType: 'dynamic_1750377557973',
  customPrompt: '系统化生成聊天精华HTML报告及AI解读的提示词 (最终优化版)\n' +
    '版本说明： 此版本集成了暖色系Bento设计、核心概念图的正确渲染、详实摘要、充分引用、以及对话内容的完全展开显示。\n' +
    '\n' +
    '模块一：总体任务与输入输出定义\n' +
    '核心任务：\n' +
    '\n' +
    '深入分析用户上传的聊天记录文本文件（例如，AI传术师俱乐部|生财有术_YYYY-MM-DD.txt）。\n' +
    '\n' +
    '提取关键信息，包括核心讨论话题、代表性对话（务必要选择更有洞察力的对话，让人看完后有一种aha moment）、富有洞察力或趣味性的群友金句、以及提及的产品与资源。这一块要反复思考，确保能提取出有最好的洞察内容！\n' +
    '\n' +
    '生成一个结构化、信息丰富且视觉效果出色的单页HTML报告，采用暖色系设计。\n' +
    '\n' +
    '输入数据：\n' +
    '\n' +
    '一个聊天记录文本文件。文件名格式: 俱乐部名称_YYYY-MM-DD.txt (提取俱乐部名称和日期用于报告标题)。\n' +
    '\n' +
    '聊天记录格式通常为：发言人(可选的wxid) HH:MM:SS\\n发言内容 或 发言人(可选的wxid) YYYY-MM-DD HH:MM:SS\\n发言内容。AI需能灵活处理时间戳格式。\n' +
    '\n' +
    '最终输出：\n' +
    '\n' +
    '一个独立的 .html 文件，包含所有指定内容和功能，使用中文呈现。\n' +
    '\n' +
    '报告主标题应结合文件名中的俱乐部名称和日期，例如："AI传术师俱乐部 | 生财有术 - 2025年05月22日 聊天精华报告"。\n' +
    '\n' +
    '模块二：内容提取与分析 (摘要与引用强化)\n' +
    '1. 本日核心议题聚焦：关键词速览\n' +
    '\n' +
    '核心关键词智能提取： AI需深入分析当日聊天记录，自动识别并提取出讨论频率较高、能够代表当日核心讨论方向的主要关键词或关键短语。\n' +
    '\n' +
    '提取原则： 侧重于提取能明确指向讨论主题的名词、专有名词（如产品名、项目名、人物名）、以及被反复提及的核心动词或概念性短语。应自动过滤常见的中文停用词、无实际意义的语气词、高频但非主题性的寒暄语或日常用语。\n' +
    '\n' +
    '输出数量： 目标是精炼地提取约 6-10个 当日最具代表性的核心关键词/短语。\n' +
    '\n' +
    '关键词呈现方式（HTML中）： 在报告醒目位置展示。每个关键词包裹在 <span class="keyword-tag"> 标签中，通过CSS赋予其暖色背景、圆角、内边距，形成视觉上清晰的“标签云”效果。\n' +
    '\n' +
    '2. 核心概念关系图 (Mermaid.js)\n' +
    '\n' +
    '关系分析： 基于提取的核心关键词及聊天内容，AI需分析这些概念之间的潜在联系（如：A工具用于B场景，C概念是D技术的子集，E和F常被一同讨论等）。\n' +
    '\n' +
    'Mermaid语法生成： 将分析出的关系，转化为Mermaid.js的 graph LR; 的代码，并为其节点添加符合暖色系主题的样式。\n' +
    '\n' +
    '呈现位置： 在“关键词速览”之后，或作为一个独立的、视觉上吸引人的模块。\n' +
    '\n' +
    '3. 精华话题识别与提炼 (⭐优化重点一：摘要详实化)\n' +
    '\n' +
    '自动从全部聊天记录中识别出多个讨论热度最高、持续时间较长或最具价值的核心话题。\n' +
    '\n' +
    '为每个话题生成一段详实、具体的摘要 (约150-250字)。这段摘要必须超越简单的“讨论了XX”的层面，做到：\n' +
    '\n' +
    '点明核心参与者： 明确指出是哪几位成员主导或贡献了关键观点。\n' +
    '\n' +
    '概括关键观点与碰撞： 精炼地总结各方的主要论点、提出的具体产品/方法、以及不同看法的交锋。\n' +
    '\n' +
    '包含具体信息： 摘要中应包含讨论中出现的专有名词、工具名、关键数据或核心结论。\n' +
    '\n' +
    '展现讨论脉络： 描述讨论是如何开始、发展和收尾的，体现出逻辑递进关系。\n' +
    '\n' +
    '4. 重要对话节选 (⭐优化重点二：增加引用以保证上下文)\n' +
    '\n' +
    '充分引用原则： 针对每个核心话题，筛选并引用足够数量（建议 8-15条，或更多）的连续或关键对话片段。目标是让读者仅通过节选的对话，就能清晰地理解该话题的起因、发展、关键转折点和最终结论，形成完整的上下文闭环。\n' +
    '\n' +
    '引用选择标准： 优先选择那些**信息密度高、富有洞察力（Aha Moment）**的对话，包括开场白、核心论点、观点碰撞和总结性发言。\n' +
    '\n' +
    '5. 群友金句提取：\n' +
    '\n' +
    '挑选 4-6 条具有代表性的“金句”。记录文本、发言人、时间。\n' +
    '\n' +
    '6. 提及产品与推荐资源：\n' +
    '\n' +
    '产品介绍： 识别产品名，AI使用网络搜索并提炼一句20字内的核心介绍。HTML中：<strong>[产品名]</strong>：[AI生成的20字介绍]。\n' +
    '\n' +
    '文章/资源推荐： 识别文章标题和URL。HTML中：<a href="[URL]" target="_blank">[标题]</a>。\n' +
    '\n' +
    '模块三：HTML结构与设计哲学 (暖色系Bento Grid启发，聚焦视觉与分享)\n' +
    '你是极具审美的前端设计大师，请为我生成一个基于 Bento Grid 启发式设计风格的单页HTML网站，内嵌CSS、JS。此页面需采用统一的暖色系调色板 (例如：主色调可选米白#FFFAF0、浅黄、淡橙，搭配深褐、赭石等作为强调色和文本色)，营造温馨、专业且富有活力的视觉氛围。页面将被截图分享，因此视觉效果和阅读体验至关重要。\n' +
    '\n' +
    '核心设计原则：\n' +
    '\n' +
    '视觉惊艳 (Aha-Moment)： 创造一个既美观又现代的页面，第一眼就能吸引用户。\n' +
    '\n' +
    '卓越可读性： 确保所有文本内容在暖色背景下依然清晰易读，对比度适宜。\n' +
    '\n' +
    '信息层级清晰： 通过大小、字重、颜色和空间布局，突出重点内容。\n' +
    '\n' +
    'Bento启发式布局： 页面由多个独立的、大小和排列可以不对称的“卡片”或“区块”组成，但整体需保持视觉平衡与和谐。\n' +
    '\n' +
    '分享友好： 整体设计需考虑截图后的美观度。\n' +
    '\n' +
    '具体设计指导：\n' +
    '\n' +
    `字体组合： font-family: 'Noto Sans SC', -apple-system, BlinkMacSystemFont, "Segoe UI", ... sans-serif;\n` +
    '\n' +
    '字号： 主标题 >= 32px, 卡片标题 >= 24px, 正文 >= 16px, 辅助文字 >= 14px。\n' +
    '\n' +
    '行高： 1.8。\n' +
    '\n' +
    '配色方案 (暖色系)：\n' +
    '\n' +
    '背景： 主背景 #FFFAF0 或类似的米白色。\n' +
    '\n' +
    '卡片背景： rgba(255, 255, 255, 0.7) 配合 backdrop-filter: blur(10px); 营造质感。\n' +
    '\n' +
    '文本： 深暖色如 #4A4A4A, #8C5B2F。\n' +
    '\n' +
    '强调/链接： 饱和度稍高的暖色如 #D4A266, #FDBA74。\n' +
    '\n' +
    '图标： 适度使用 Font Awesome 图标点缀。\n' +
    '\n' +
    '模块四：核心内容模块生成细则 (HTML与样式)\n' +
    '“核心概念关系图”模块：\n' +
    '\n' +
    '二级标题。包含 <div class="mermaid ..."> 元素，填充Mermaid代码。必须确保图表被正确渲染为SVG，而不是显示为代码。\n' +
    '\n' +
    '“精华话题聚焦”模块：\n' +
    '\n' +
    '二级标题。\n' +
    '\n' +
    '每个话题卡片 (.topic-card):\n' +
    '\n' +
    '话题标题 (三级标题)。\n' +
    '\n' +
    '详实的话题摘要 (.topic-description)。\n' +
    '\n' +
    '“重要对话节选”小标题。\n' +
    '\n' +
    '对话列表 (.dialogue-container):\n' +
    '\n' +
    '【重要优化】 对话容器 不应 设置最大高度 (max-height) 或 overflow 属性。必须确保所有对话内容默认完全展开，让用户无需滚动即可查看全部节选对话。\n' +
    '\n' +
    '每条对话使用 .message-bubble 样式，通过 margin-left: auto 和 margin-right: auto 及不同背景色区分发言人。\n' +
    '\n' +
    '“群友金句闪耀”模块：\n' +
    '\n' +
    '二级标题。网格布局。金句卡片内含金句文本、作者和AI解读区域。\n' +
    '\n' +
    '“提及产品与资源”模块：\n' +
    '\n' +
    '二级标题。列表形式展示。\n' +
    '\n' +
    '模块五：金句AI解读与嵌入 (静态)\n' +
    'AI直接生成并嵌入解读：在HTML生成阶段，对每条“群友金句”，直接生成一段50-100字的中文解读，并写入该金句卡片内对应的 .interpretation-area div中。\n' +
    '\n' +
    '模块六：技术、风格与环境要求\n' +
    '技术栈： HTML5, Tailwind CSS, Font Awesome, Mermaid.js, 必要JS。\n' +
    '\n' +
    'CDN链接：\n' +
    '\n' +
    'Tailwind CSS: https://cdn.tailwindcss.com\n' +
    '\n' +
    'Font Awesome: https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\n' +
    '\n' +
    'Mermaid.js:\n' +
    '\n' +
    `【重要优化】 必须通过 <script type="module"> 引入，并从 ESM (ES Module) 版本的CDN链接导入，例如：import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';。\n` +
    '\n' +
    '初始化代码 (mermaid.initialize(...)) 必须放在该模块脚本中，以确保在DOM加载后正确执行渲染，避免图表显示为源码。\n' +
    '\n' +
    '响应式设计： 强制。在手机、平板、桌面均完美展示。\n' +
    '\n' +
    '代码规范： 注释清晰，语义化。\n' +
    '\n' +
    '语言： 所有用户可见文本为中文。\n' +
    '\n' +
    '总结性要求： AI需综合理解以上所有模块的指令，将它们视为一个整体的、连贯的任务，最终输出一个功能完整、内容准确、视觉采用统一暖色调、体验优秀的HTML报告。特别注意，在“精华话题聚焦”模块，必须严格遵循摘要详实化、对话充分引用和对话内容完全展开的新标准。',
  timeRange: '2025-06-28'
}
🤖 AI调用 (第1次尝试)
发送到AI的提示词长度: 8933
📊 提示词长度: 8933 字符
📊 Gemini处理完整数据，长度: 9214 字符
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
❌ AI API调用失败 (第1次): socket hang up
⏳ 5秒后进行第2次重试...
🤖 AI调用 (第2次尝试)
发送到AI的提示词长度: 8933
📊 提示词长度: 8933 字符
📊 Gemini处理完整数据，长度: 9214 字符
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
❌ AI API调用失败 (第2次): socket hang up
⏳ 10秒后进行第3次重试...
🤖 AI调用 (第3次尝试)
发送到AI的提示词长度: 8933
📊 提示词长度: 8933 字符
📊 Gemini处理完整数据，长度: 9214 字符
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
❌ AI API调用失败 (第3次): socket hang up
⏳ 20秒后进行第4次重试...
🔍 Chatlog连接检测第1次尝试...
✅ Chatlog连接测试成功，状态码: 200
🤖 AI调用 (第4次尝试)
发送到AI的提示词长度: 8933
📊 提示词长度: 8933 字符
📊 Gemini处理完整数据，长度: 9214 字符
